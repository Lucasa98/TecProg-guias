(define abs (lambda (x)
              (sqrt (* x x))
              )
  )

(define boolean->number (lambda (b)
                          (if (eqv? b "F")
                              0
                              1)
                          )
  )

(define convlistaB (lambda (ls)
                     (if (null? ls)
                         ()
                         (let ((p (car ls)) (r (cdr ls)))
                           (cons (boolean->number p) (convlistaB r))
                           )
                         )
                     )
  )

(define convlistaT (lambda (ls)
                     (if (null? ls)
                         ()
                         (let ((p (car ls)) (r (cdr ls)))
                           (cons (string->number p) (convlistaT r))
                           )
                         )
                     )
  )

(define convlistaD (lambda (ls)
                    (if (null? ls)
                        ()
                        (let ((p (car ls)) (r (cdr ls)))
                          (cons (abs p) (convlistaD r))
                          )
                        )
                    )
  )

(define convdatos (lambda (ls)
                    (if (null? ls)
                        ()
                        (let ((p (car ls)) (r (cdr ls)))
                          (let ((type (car p)) (values (car (cdr p))))
                            (if (eqv? type "D")
                                (cons (convlistaD values) (convdatos r))
                            (if (eqv? type "T")
                                (cons (convlistaT values) (convdatos r))
                            (if (eqv? type "B")
                                (cons (convlistaB values) (convdatos r))
                                )))
                            )
                          )
                        )
                    )
  )

(convdatos '(("D" (1 2 3 4 5)) ("T" ("6" "7" "8")) ("B" ("V" "F"))))